// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactservice

import (
	"context"
	interactdemo "demo/tiktok/kitex_gen/interactdemo"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateFavorite(ctx context.Context, Req *interactdemo.FavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.FavoriteResponse, err error)
	DeleteFavorite(ctx context.Context, Req *interactdemo.FavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.FavoriteResponse, err error)
	GetUserFavorite(ctx context.Context, Req *interactdemo.GetUserFavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.GetUserFavoriteResponse, err error)
	CheckFavorite(ctx context.Context, Req *interactdemo.CheckFavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.CheckFavoriteResponse, err error)
	CreateComment(ctx context.Context, Req *interactdemo.CreateCommentRequest, callOptions ...callopt.Option) (r *interactdemo.CommentResponse, err error)
	DeleteComment(ctx context.Context, Req *interactdemo.DeleteCommentRequest, callOptions ...callopt.Option) (r *interactdemo.CommentResponse, err error)
	GetVideoComment(ctx context.Context, Req *interactdemo.GetVideoCommentRequest, callOptions ...callopt.Option) (r *interactdemo.GetVideoCommentRespense, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractServiceClient struct {
	*kClient
}

func (p *kInteractServiceClient) CreateFavorite(ctx context.Context, Req *interactdemo.FavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.FavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFavorite(ctx, Req)
}

func (p *kInteractServiceClient) DeleteFavorite(ctx context.Context, Req *interactdemo.FavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.FavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteFavorite(ctx, Req)
}

func (p *kInteractServiceClient) GetUserFavorite(ctx context.Context, Req *interactdemo.GetUserFavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.GetUserFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserFavorite(ctx, Req)
}

func (p *kInteractServiceClient) CheckFavorite(ctx context.Context, Req *interactdemo.CheckFavoriteRequest, callOptions ...callopt.Option) (r *interactdemo.CheckFavoriteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckFavorite(ctx, Req)
}

func (p *kInteractServiceClient) CreateComment(ctx context.Context, Req *interactdemo.CreateCommentRequest, callOptions ...callopt.Option) (r *interactdemo.CommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateComment(ctx, Req)
}

func (p *kInteractServiceClient) DeleteComment(ctx context.Context, Req *interactdemo.DeleteCommentRequest, callOptions ...callopt.Option) (r *interactdemo.CommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, Req)
}

func (p *kInteractServiceClient) GetVideoComment(ctx context.Context, Req *interactdemo.GetVideoCommentRequest, callOptions ...callopt.Option) (r *interactdemo.GetVideoCommentRespense, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoComment(ctx, Req)
}
