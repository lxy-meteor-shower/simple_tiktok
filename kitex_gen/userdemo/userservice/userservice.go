// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	userdemo "demo/tiktok/kitex_gen/userdemo"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*userdemo.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":    kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"CheckUser":     kitex.NewMethodInfo(checkUserHandler, newCheckUserArgs, newCheckUserResult, false),
		"MGetUser":      kitex.NewMethodInfo(mGetUserHandler, newMGetUserArgs, newMGetUserResult, false),
		"IncFavorited":  kitex.NewMethodInfo(incFavoritedHandler, newIncFavoritedArgs, newIncFavoritedResult, false),
		"IncVideo":      kitex.NewMethodInfo(incVideoHandler, newIncVideoArgs, newIncVideoResult, false),
		"IncFavorite":   kitex.NewMethodInfo(incFavoriteHandler, newIncFavoriteArgs, newIncFavoriteResult, false),
		"DescFavorited": kitex.NewMethodInfo(descFavoritedHandler, newDescFavoritedArgs, newDescFavoritedResult, false),
		"DescFavorite":  kitex.NewMethodInfo(descFavoriteHandler, newDescFavoriteArgs, newDescFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.CreateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(userdemo.UserService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *userdemo.CreateUserRequest
}

func (p *CreateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.CreateUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.CreateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *userdemo.CreateUserRequest

func (p *CreateUserArgs) GetReq() *userdemo.CreateUserRequest {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateUserResult struct {
	Success *userdemo.CreateUserResponse
}

var CreateUserResult_Success_DEFAULT *userdemo.CreateUserResponse

func (p *CreateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.CreateUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.CreateUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *userdemo.CreateUserResponse {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.CreateUserResponse)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.CheckUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).CheckUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckUserArgs:
		success, err := handler.(userdemo.UserService).CheckUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckUserResult)
		realResult.Success = success
	}
	return nil
}
func newCheckUserArgs() interface{} {
	return &CheckUserArgs{}
}

func newCheckUserResult() interface{} {
	return &CheckUserResult{}
}

type CheckUserArgs struct {
	Req *userdemo.CheckUserRequest
}

func (p *CheckUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.CheckUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.CheckUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckUserArgs_Req_DEFAULT *userdemo.CheckUserRequest

func (p *CheckUserArgs) GetReq() *userdemo.CheckUserRequest {
	if !p.IsSetReq() {
		return CheckUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckUserResult struct {
	Success *userdemo.CheckUserResponse
}

var CheckUserResult_Success_DEFAULT *userdemo.CheckUserResponse

func (p *CheckUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.CheckUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.CheckUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckUserResult) GetSuccess() *userdemo.CheckUserResponse {
	if !p.IsSetSuccess() {
		return CheckUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.CheckUserResponse)
}

func (p *CheckUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func mGetUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.MGetUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).MGetUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MGetUserArgs:
		success, err := handler.(userdemo.UserService).MGetUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MGetUserResult)
		realResult.Success = success
	}
	return nil
}
func newMGetUserArgs() interface{} {
	return &MGetUserArgs{}
}

func newMGetUserResult() interface{} {
	return &MGetUserResult{}
}

type MGetUserArgs struct {
	Req *userdemo.MGetUserRequest
}

func (p *MGetUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.MGetUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MGetUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MGetUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MGetUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MGetUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MGetUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.MGetUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MGetUserArgs_Req_DEFAULT *userdemo.MGetUserRequest

func (p *MGetUserArgs) GetReq() *userdemo.MGetUserRequest {
	if !p.IsSetReq() {
		return MGetUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type MGetUserResult struct {
	Success *userdemo.MGetUserResponse
}

var MGetUserResult_Success_DEFAULT *userdemo.MGetUserResponse

func (p *MGetUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.MGetUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MGetUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MGetUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MGetUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MGetUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MGetUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.MGetUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MGetUserResult) GetSuccess() *userdemo.MGetUserResponse {
	if !p.IsSetSuccess() {
		return MGetUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.MGetUserResponse)
}

func (p *MGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func incFavoritedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.ChangeUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).IncFavorited(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IncFavoritedArgs:
		success, err := handler.(userdemo.UserService).IncFavorited(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncFavoritedResult)
		realResult.Success = success
	}
	return nil
}
func newIncFavoritedArgs() interface{} {
	return &IncFavoritedArgs{}
}

func newIncFavoritedResult() interface{} {
	return &IncFavoritedResult{}
}

type IncFavoritedArgs struct {
	Req *userdemo.ChangeUserRequest
}

func (p *IncFavoritedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.ChangeUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncFavoritedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncFavoritedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncFavoritedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IncFavoritedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IncFavoritedArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncFavoritedArgs_Req_DEFAULT *userdemo.ChangeUserRequest

func (p *IncFavoritedArgs) GetReq() *userdemo.ChangeUserRequest {
	if !p.IsSetReq() {
		return IncFavoritedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncFavoritedArgs) IsSetReq() bool {
	return p.Req != nil
}

type IncFavoritedResult struct {
	Success *userdemo.ChangeUserResponse
}

var IncFavoritedResult_Success_DEFAULT *userdemo.ChangeUserResponse

func (p *IncFavoritedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.ChangeUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncFavoritedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncFavoritedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncFavoritedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IncFavoritedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IncFavoritedResult) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncFavoritedResult) GetSuccess() *userdemo.ChangeUserResponse {
	if !p.IsSetSuccess() {
		return IncFavoritedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncFavoritedResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.ChangeUserResponse)
}

func (p *IncFavoritedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func incVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.ChangeUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).IncVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IncVideoArgs:
		success, err := handler.(userdemo.UserService).IncVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncVideoResult)
		realResult.Success = success
	}
	return nil
}
func newIncVideoArgs() interface{} {
	return &IncVideoArgs{}
}

func newIncVideoResult() interface{} {
	return &IncVideoResult{}
}

type IncVideoArgs struct {
	Req *userdemo.ChangeUserRequest
}

func (p *IncVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.ChangeUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IncVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IncVideoArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncVideoArgs_Req_DEFAULT *userdemo.ChangeUserRequest

func (p *IncVideoArgs) GetReq() *userdemo.ChangeUserRequest {
	if !p.IsSetReq() {
		return IncVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type IncVideoResult struct {
	Success *userdemo.ChangeUserResponse
}

var IncVideoResult_Success_DEFAULT *userdemo.ChangeUserResponse

func (p *IncVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.ChangeUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IncVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IncVideoResult) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncVideoResult) GetSuccess() *userdemo.ChangeUserResponse {
	if !p.IsSetSuccess() {
		return IncVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.ChangeUserResponse)
}

func (p *IncVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func incFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.ChangeUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).IncFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IncFavoriteArgs:
		success, err := handler.(userdemo.UserService).IncFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newIncFavoriteArgs() interface{} {
	return &IncFavoriteArgs{}
}

func newIncFavoriteResult() interface{} {
	return &IncFavoriteResult{}
}

type IncFavoriteArgs struct {
	Req *userdemo.ChangeUserRequest
}

func (p *IncFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.ChangeUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IncFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IncFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncFavoriteArgs_Req_DEFAULT *userdemo.ChangeUserRequest

func (p *IncFavoriteArgs) GetReq() *userdemo.ChangeUserRequest {
	if !p.IsSetReq() {
		return IncFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type IncFavoriteResult struct {
	Success *userdemo.ChangeUserResponse
}

var IncFavoriteResult_Success_DEFAULT *userdemo.ChangeUserResponse

func (p *IncFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.ChangeUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IncFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IncFavoriteResult) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncFavoriteResult) GetSuccess() *userdemo.ChangeUserResponse {
	if !p.IsSetSuccess() {
		return IncFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.ChangeUserResponse)
}

func (p *IncFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func descFavoritedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.ChangeUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).DescFavorited(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DescFavoritedArgs:
		success, err := handler.(userdemo.UserService).DescFavorited(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DescFavoritedResult)
		realResult.Success = success
	}
	return nil
}
func newDescFavoritedArgs() interface{} {
	return &DescFavoritedArgs{}
}

func newDescFavoritedResult() interface{} {
	return &DescFavoritedResult{}
}

type DescFavoritedArgs struct {
	Req *userdemo.ChangeUserRequest
}

func (p *DescFavoritedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.ChangeUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DescFavoritedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DescFavoritedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DescFavoritedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DescFavoritedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DescFavoritedArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DescFavoritedArgs_Req_DEFAULT *userdemo.ChangeUserRequest

func (p *DescFavoritedArgs) GetReq() *userdemo.ChangeUserRequest {
	if !p.IsSetReq() {
		return DescFavoritedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DescFavoritedArgs) IsSetReq() bool {
	return p.Req != nil
}

type DescFavoritedResult struct {
	Success *userdemo.ChangeUserResponse
}

var DescFavoritedResult_Success_DEFAULT *userdemo.ChangeUserResponse

func (p *DescFavoritedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.ChangeUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DescFavoritedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DescFavoritedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DescFavoritedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DescFavoritedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DescFavoritedResult) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DescFavoritedResult) GetSuccess() *userdemo.ChangeUserResponse {
	if !p.IsSetSuccess() {
		return DescFavoritedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DescFavoritedResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.ChangeUserResponse)
}

func (p *DescFavoritedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func descFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.ChangeUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).DescFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DescFavoriteArgs:
		success, err := handler.(userdemo.UserService).DescFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DescFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newDescFavoriteArgs() interface{} {
	return &DescFavoriteArgs{}
}

func newDescFavoriteResult() interface{} {
	return &DescFavoriteResult{}
}

type DescFavoriteArgs struct {
	Req *userdemo.ChangeUserRequest
}

func (p *DescFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userdemo.ChangeUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DescFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DescFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DescFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DescFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DescFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DescFavoriteArgs_Req_DEFAULT *userdemo.ChangeUserRequest

func (p *DescFavoriteArgs) GetReq() *userdemo.ChangeUserRequest {
	if !p.IsSetReq() {
		return DescFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DescFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type DescFavoriteResult struct {
	Success *userdemo.ChangeUserResponse
}

var DescFavoriteResult_Success_DEFAULT *userdemo.ChangeUserResponse

func (p *DescFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userdemo.ChangeUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DescFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DescFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DescFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DescFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DescFavoriteResult) Unmarshal(in []byte) error {
	msg := new(userdemo.ChangeUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DescFavoriteResult) GetSuccess() *userdemo.ChangeUserResponse {
	if !p.IsSetSuccess() {
		return DescFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DescFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.ChangeUserResponse)
}

func (p *DescFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, Req *userdemo.CreateUserRequest) (r *userdemo.CreateUserResponse, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, Req *userdemo.CheckUserRequest) (r *userdemo.CheckUserResponse, err error) {
	var _args CheckUserArgs
	_args.Req = Req
	var _result CheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MGetUser(ctx context.Context, Req *userdemo.MGetUserRequest) (r *userdemo.MGetUserResponse, err error) {
	var _args MGetUserArgs
	_args.Req = Req
	var _result MGetUserResult
	if err = p.c.Call(ctx, "MGetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncFavorited(ctx context.Context, Req *userdemo.ChangeUserRequest) (r *userdemo.ChangeUserResponse, err error) {
	var _args IncFavoritedArgs
	_args.Req = Req
	var _result IncFavoritedResult
	if err = p.c.Call(ctx, "IncFavorited", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncVideo(ctx context.Context, Req *userdemo.ChangeUserRequest) (r *userdemo.ChangeUserResponse, err error) {
	var _args IncVideoArgs
	_args.Req = Req
	var _result IncVideoResult
	if err = p.c.Call(ctx, "IncVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncFavorite(ctx context.Context, Req *userdemo.ChangeUserRequest) (r *userdemo.ChangeUserResponse, err error) {
	var _args IncFavoriteArgs
	_args.Req = Req
	var _result IncFavoriteResult
	if err = p.c.Call(ctx, "IncFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescFavorited(ctx context.Context, Req *userdemo.ChangeUserRequest) (r *userdemo.ChangeUserResponse, err error) {
	var _args DescFavoritedArgs
	_args.Req = Req
	var _result DescFavoritedResult
	if err = p.c.Call(ctx, "DescFavorited", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescFavorite(ctx context.Context, Req *userdemo.ChangeUserRequest) (r *userdemo.ChangeUserResponse, err error) {
	var _args DescFavoriteArgs
	_args.Req = Req
	var _result DescFavoriteResult
	if err = p.c.Call(ctx, "DescFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
