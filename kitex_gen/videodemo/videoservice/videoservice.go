// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	videodemo "demo/tiktok/kitex_gen/videodemo"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videodemo.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideo":       kitex.NewMethodInfo(createVideoHandler, newCreateVideoArgs, newCreateVideoResult, false),
		"GetUserVideo":      kitex.NewMethodInfo(getUserVideoHandler, newGetUserVideoArgs, newGetUserVideoResult, false),
		"GetFeed":           kitex.NewMethodInfo(getFeedHandler, newGetFeedArgs, newGetFeedResult, false),
		"GetFavoriteVideo":  kitex.NewMethodInfo(getFavoriteVideoHandler, newGetFavoriteVideoArgs, newGetFavoriteVideoResult, false),
		"IncFavoriteCount":  kitex.NewMethodInfo(incFavoriteCountHandler, newIncFavoriteCountArgs, newIncFavoriteCountResult, false),
		"IncCommentCount":   kitex.NewMethodInfo(incCommentCountHandler, newIncCommentCountArgs, newIncCommentCountResult, false),
		"DescFavoriteCount": kitex.NewMethodInfo(descFavoriteCountHandler, newDescFavoriteCountArgs, newDescFavoriteCountResult, false),
		"DescCommentCount":  kitex.NewMethodInfo(descCommentCountHandler, newDescCommentCountArgs, newDescCommentCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.CreateVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).CreateVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateVideoArgs:
		success, err := handler.(videodemo.VideoService).CreateVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateVideoResult)
		realResult.Success = success
	}
	return nil
}
func newCreateVideoArgs() interface{} {
	return &CreateVideoArgs{}
}

func newCreateVideoResult() interface{} {
	return &CreateVideoResult{}
}

type CreateVideoArgs struct {
	Req *videodemo.CreateVideoRequest
}

func (p *CreateVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.CreateVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateVideoArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.CreateVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateVideoArgs_Req_DEFAULT *videodemo.CreateVideoRequest

func (p *CreateVideoArgs) GetReq() *videodemo.CreateVideoRequest {
	if !p.IsSetReq() {
		return CreateVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateVideoResult struct {
	Success *videodemo.CreateVideoResponse
}

var CreateVideoResult_Success_DEFAULT *videodemo.CreateVideoResponse

func (p *CreateVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.CreateVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateVideoResult) Unmarshal(in []byte) error {
	msg := new(videodemo.CreateVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateVideoResult) GetSuccess() *videodemo.CreateVideoResponse {
	if !p.IsSetSuccess() {
		return CreateVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.CreateVideoResponse)
}

func (p *CreateVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.GetUserVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).GetUserVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserVideoArgs:
		success, err := handler.(videodemo.VideoService).GetUserVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserVideoResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserVideoArgs() interface{} {
	return &GetUserVideoArgs{}
}

func newGetUserVideoResult() interface{} {
	return &GetUserVideoResult{}
}

type GetUserVideoArgs struct {
	Req *videodemo.GetUserVideoRequest
}

func (p *GetUserVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.GetUserVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserVideoArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.GetUserVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserVideoArgs_Req_DEFAULT *videodemo.GetUserVideoRequest

func (p *GetUserVideoArgs) GetReq() *videodemo.GetUserVideoRequest {
	if !p.IsSetReq() {
		return GetUserVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserVideoResult struct {
	Success *videodemo.GetUserVideoResponse
}

var GetUserVideoResult_Success_DEFAULT *videodemo.GetUserVideoResponse

func (p *GetUserVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.GetUserVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserVideoResult) Unmarshal(in []byte) error {
	msg := new(videodemo.GetUserVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserVideoResult) GetSuccess() *videodemo.GetUserVideoResponse {
	if !p.IsSetSuccess() {
		return GetUserVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.GetUserVideoResponse)
}

func (p *GetUserVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.GetFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).GetFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFeedArgs:
		success, err := handler.(videodemo.VideoService).GetFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFeedResult)
		realResult.Success = success
	}
	return nil
}
func newGetFeedArgs() interface{} {
	return &GetFeedArgs{}
}

func newGetFeedResult() interface{} {
	return &GetFeedResult{}
}

type GetFeedArgs struct {
	Req *videodemo.GetFeedRequest
}

func (p *GetFeedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.GetFeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFeedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFeedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFeedArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.GetFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFeedArgs_Req_DEFAULT *videodemo.GetFeedRequest

func (p *GetFeedArgs) GetReq() *videodemo.GetFeedRequest {
	if !p.IsSetReq() {
		return GetFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFeedResult struct {
	Success *videodemo.GetFeedResponse
}

var GetFeedResult_Success_DEFAULT *videodemo.GetFeedResponse

func (p *GetFeedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.GetFeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFeedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFeedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFeedResult) Unmarshal(in []byte) error {
	msg := new(videodemo.GetFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFeedResult) GetSuccess() *videodemo.GetFeedResponse {
	if !p.IsSetSuccess() {
		return GetFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.GetFeedResponse)
}

func (p *GetFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFavoriteVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.GetFavoriteVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).GetFavoriteVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFavoriteVideoArgs:
		success, err := handler.(videodemo.VideoService).GetFavoriteVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFavoriteVideoResult)
		realResult.Success = success
	}
	return nil
}
func newGetFavoriteVideoArgs() interface{} {
	return &GetFavoriteVideoArgs{}
}

func newGetFavoriteVideoResult() interface{} {
	return &GetFavoriteVideoResult{}
}

type GetFavoriteVideoArgs struct {
	Req *videodemo.GetFavoriteVideoRequest
}

func (p *GetFavoriteVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.GetFavoriteVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFavoriteVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFavoriteVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFavoriteVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFavoriteVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFavoriteVideoArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.GetFavoriteVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFavoriteVideoArgs_Req_DEFAULT *videodemo.GetFavoriteVideoRequest

func (p *GetFavoriteVideoArgs) GetReq() *videodemo.GetFavoriteVideoRequest {
	if !p.IsSetReq() {
		return GetFavoriteVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFavoriteVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFavoriteVideoResult struct {
	Success *videodemo.GetFavoriteVideoResponse
}

var GetFavoriteVideoResult_Success_DEFAULT *videodemo.GetFavoriteVideoResponse

func (p *GetFavoriteVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.GetFavoriteVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFavoriteVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFavoriteVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFavoriteVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFavoriteVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFavoriteVideoResult) Unmarshal(in []byte) error {
	msg := new(videodemo.GetFavoriteVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFavoriteVideoResult) GetSuccess() *videodemo.GetFavoriteVideoResponse {
	if !p.IsSetSuccess() {
		return GetFavoriteVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFavoriteVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.GetFavoriteVideoResponse)
}

func (p *GetFavoriteVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func incFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.ChangeVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).IncFavoriteCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IncFavoriteCountArgs:
		success, err := handler.(videodemo.VideoService).IncFavoriteCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncFavoriteCountResult)
		realResult.Success = success
	}
	return nil
}
func newIncFavoriteCountArgs() interface{} {
	return &IncFavoriteCountArgs{}
}

func newIncFavoriteCountResult() interface{} {
	return &IncFavoriteCountResult{}
}

type IncFavoriteCountArgs struct {
	Req *videodemo.ChangeVideoRequest
}

func (p *IncFavoriteCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.ChangeVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncFavoriteCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncFavoriteCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncFavoriteCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IncFavoriteCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IncFavoriteCountArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncFavoriteCountArgs_Req_DEFAULT *videodemo.ChangeVideoRequest

func (p *IncFavoriteCountArgs) GetReq() *videodemo.ChangeVideoRequest {
	if !p.IsSetReq() {
		return IncFavoriteCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncFavoriteCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type IncFavoriteCountResult struct {
	Success *videodemo.ChangeVideoResponse
}

var IncFavoriteCountResult_Success_DEFAULT *videodemo.ChangeVideoResponse

func (p *IncFavoriteCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.ChangeVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncFavoriteCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncFavoriteCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncFavoriteCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IncFavoriteCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IncFavoriteCountResult) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncFavoriteCountResult) GetSuccess() *videodemo.ChangeVideoResponse {
	if !p.IsSetSuccess() {
		return IncFavoriteCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncFavoriteCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.ChangeVideoResponse)
}

func (p *IncFavoriteCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func incCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.ChangeVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).IncCommentCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IncCommentCountArgs:
		success, err := handler.(videodemo.VideoService).IncCommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncCommentCountResult)
		realResult.Success = success
	}
	return nil
}
func newIncCommentCountArgs() interface{} {
	return &IncCommentCountArgs{}
}

func newIncCommentCountResult() interface{} {
	return &IncCommentCountResult{}
}

type IncCommentCountArgs struct {
	Req *videodemo.ChangeVideoRequest
}

func (p *IncCommentCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.ChangeVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncCommentCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncCommentCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncCommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IncCommentCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IncCommentCountArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncCommentCountArgs_Req_DEFAULT *videodemo.ChangeVideoRequest

func (p *IncCommentCountArgs) GetReq() *videodemo.ChangeVideoRequest {
	if !p.IsSetReq() {
		return IncCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type IncCommentCountResult struct {
	Success *videodemo.ChangeVideoResponse
}

var IncCommentCountResult_Success_DEFAULT *videodemo.ChangeVideoResponse

func (p *IncCommentCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.ChangeVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncCommentCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncCommentCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncCommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IncCommentCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IncCommentCountResult) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncCommentCountResult) GetSuccess() *videodemo.ChangeVideoResponse {
	if !p.IsSetSuccess() {
		return IncCommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.ChangeVideoResponse)
}

func (p *IncCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func descFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.ChangeVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).DescFavoriteCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DescFavoriteCountArgs:
		success, err := handler.(videodemo.VideoService).DescFavoriteCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DescFavoriteCountResult)
		realResult.Success = success
	}
	return nil
}
func newDescFavoriteCountArgs() interface{} {
	return &DescFavoriteCountArgs{}
}

func newDescFavoriteCountResult() interface{} {
	return &DescFavoriteCountResult{}
}

type DescFavoriteCountArgs struct {
	Req *videodemo.ChangeVideoRequest
}

func (p *DescFavoriteCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.ChangeVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DescFavoriteCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DescFavoriteCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DescFavoriteCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DescFavoriteCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DescFavoriteCountArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DescFavoriteCountArgs_Req_DEFAULT *videodemo.ChangeVideoRequest

func (p *DescFavoriteCountArgs) GetReq() *videodemo.ChangeVideoRequest {
	if !p.IsSetReq() {
		return DescFavoriteCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DescFavoriteCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type DescFavoriteCountResult struct {
	Success *videodemo.ChangeVideoResponse
}

var DescFavoriteCountResult_Success_DEFAULT *videodemo.ChangeVideoResponse

func (p *DescFavoriteCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.ChangeVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DescFavoriteCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DescFavoriteCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DescFavoriteCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DescFavoriteCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DescFavoriteCountResult) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DescFavoriteCountResult) GetSuccess() *videodemo.ChangeVideoResponse {
	if !p.IsSetSuccess() {
		return DescFavoriteCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DescFavoriteCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.ChangeVideoResponse)
}

func (p *DescFavoriteCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func descCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(videodemo.ChangeVideoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(videodemo.VideoService).DescCommentCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DescCommentCountArgs:
		success, err := handler.(videodemo.VideoService).DescCommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DescCommentCountResult)
		realResult.Success = success
	}
	return nil
}
func newDescCommentCountArgs() interface{} {
	return &DescCommentCountArgs{}
}

func newDescCommentCountResult() interface{} {
	return &DescCommentCountResult{}
}

type DescCommentCountArgs struct {
	Req *videodemo.ChangeVideoRequest
}

func (p *DescCommentCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(videodemo.ChangeVideoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DescCommentCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DescCommentCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DescCommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DescCommentCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DescCommentCountArgs) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DescCommentCountArgs_Req_DEFAULT *videodemo.ChangeVideoRequest

func (p *DescCommentCountArgs) GetReq() *videodemo.ChangeVideoRequest {
	if !p.IsSetReq() {
		return DescCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DescCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type DescCommentCountResult struct {
	Success *videodemo.ChangeVideoResponse
}

var DescCommentCountResult_Success_DEFAULT *videodemo.ChangeVideoResponse

func (p *DescCommentCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(videodemo.ChangeVideoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DescCommentCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DescCommentCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DescCommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DescCommentCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DescCommentCountResult) Unmarshal(in []byte) error {
	msg := new(videodemo.ChangeVideoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DescCommentCountResult) GetSuccess() *videodemo.ChangeVideoResponse {
	if !p.IsSetSuccess() {
		return DescCommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DescCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*videodemo.ChangeVideoResponse)
}

func (p *DescCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideo(ctx context.Context, Req *videodemo.CreateVideoRequest) (r *videodemo.CreateVideoResponse, err error) {
	var _args CreateVideoArgs
	_args.Req = Req
	var _result CreateVideoResult
	if err = p.c.Call(ctx, "CreateVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserVideo(ctx context.Context, Req *videodemo.GetUserVideoRequest) (r *videodemo.GetUserVideoResponse, err error) {
	var _args GetUserVideoArgs
	_args.Req = Req
	var _result GetUserVideoResult
	if err = p.c.Call(ctx, "GetUserVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeed(ctx context.Context, Req *videodemo.GetFeedRequest) (r *videodemo.GetFeedResponse, err error) {
	var _args GetFeedArgs
	_args.Req = Req
	var _result GetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteVideo(ctx context.Context, Req *videodemo.GetFavoriteVideoRequest) (r *videodemo.GetFavoriteVideoResponse, err error) {
	var _args GetFavoriteVideoArgs
	_args.Req = Req
	var _result GetFavoriteVideoResult
	if err = p.c.Call(ctx, "GetFavoriteVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncFavoriteCount(ctx context.Context, Req *videodemo.ChangeVideoRequest) (r *videodemo.ChangeVideoResponse, err error) {
	var _args IncFavoriteCountArgs
	_args.Req = Req
	var _result IncFavoriteCountResult
	if err = p.c.Call(ctx, "IncFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncCommentCount(ctx context.Context, Req *videodemo.ChangeVideoRequest) (r *videodemo.ChangeVideoResponse, err error) {
	var _args IncCommentCountArgs
	_args.Req = Req
	var _result IncCommentCountResult
	if err = p.c.Call(ctx, "IncCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescFavoriteCount(ctx context.Context, Req *videodemo.ChangeVideoRequest) (r *videodemo.ChangeVideoResponse, err error) {
	var _args DescFavoriteCountArgs
	_args.Req = Req
	var _result DescFavoriteCountResult
	if err = p.c.Call(ctx, "DescFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescCommentCount(ctx context.Context, Req *videodemo.ChangeVideoRequest) (r *videodemo.ChangeVideoResponse, err error) {
	var _args DescCommentCountArgs
	_args.Req = Req
	var _result DescCommentCountResult
	if err = p.c.Call(ctx, "DescCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
