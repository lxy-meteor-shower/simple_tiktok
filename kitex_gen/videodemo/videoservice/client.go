// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	videodemo "demo/tiktok/kitex_gen/videodemo"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateVideo(ctx context.Context, Req *videodemo.CreateVideoRequest, callOptions ...callopt.Option) (r *videodemo.CreateVideoResponse, err error)
	GetUserVideo(ctx context.Context, Req *videodemo.GetUserVideoRequest, callOptions ...callopt.Option) (r *videodemo.GetUserVideoResponse, err error)
	GetFeed(ctx context.Context, Req *videodemo.GetFeedRequest, callOptions ...callopt.Option) (r *videodemo.GetFeedResponse, err error)
	GetFavoriteVideo(ctx context.Context, Req *videodemo.GetFavoriteVideoRequest, callOptions ...callopt.Option) (r *videodemo.GetFavoriteVideoResponse, err error)
	IncFavoriteCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error)
	IncCommentCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error)
	DescFavoriteCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error)
	DescCommentCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) CreateVideo(ctx context.Context, Req *videodemo.CreateVideoRequest, callOptions ...callopt.Option) (r *videodemo.CreateVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateVideo(ctx, Req)
}

func (p *kVideoServiceClient) GetUserVideo(ctx context.Context, Req *videodemo.GetUserVideoRequest, callOptions ...callopt.Option) (r *videodemo.GetUserVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserVideo(ctx, Req)
}

func (p *kVideoServiceClient) GetFeed(ctx context.Context, Req *videodemo.GetFeedRequest, callOptions ...callopt.Option) (r *videodemo.GetFeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFeed(ctx, Req)
}

func (p *kVideoServiceClient) GetFavoriteVideo(ctx context.Context, Req *videodemo.GetFavoriteVideoRequest, callOptions ...callopt.Option) (r *videodemo.GetFavoriteVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteVideo(ctx, Req)
}

func (p *kVideoServiceClient) IncFavoriteCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IncFavoriteCount(ctx, Req)
}

func (p *kVideoServiceClient) IncCommentCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IncCommentCount(ctx, Req)
}

func (p *kVideoServiceClient) DescFavoriteCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DescFavoriteCount(ctx, Req)
}

func (p *kVideoServiceClient) DescCommentCount(ctx context.Context, Req *videodemo.ChangeVideoRequest, callOptions ...callopt.Option) (r *videodemo.ChangeVideoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DescCommentCount(ctx, Req)
}
